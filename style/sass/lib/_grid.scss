///
// Semantic.gs 
// ============================================================================
//
// The Semantic Grid System is a modern approach to the CSS grid. It allows you
// to set column and gutter widths, choose the number of columns, switch 
// between pixels and percentages, and achieve responsive layouts, all without
// any unsemantic .grid_x classes in your markup
//
// Website: Semantic.gs 
// Author: Tyler Tate (@tylertate)
// 
// I've made a slight change in syntax. Where `row()` was used before it's
// changed to `container()` as it made logical sense to me and added a few
// extra options to the mixin.
//
// Content
// ----------------------------------------------------------------------------
// - Jack Variables
// - Utility Function
// - Sub-Pixel Fix for IE6 & 7
// - Grid
//
// 
// License
// ----------------------------------------------------------------------------
// Licensed under Apache 2.0 - http://www.apache.org/licenses/LICENSE-2.0
///


///
// Jack Variables
// ----------------------------------------------------------------------------
// Because I wanted the configs to follow naming conventions
///

$column-width: $grid-column-width;
$gutter-width: $grid-gutter-width;
$columns: $grid-columns;


///
// Utility Function
// ----------------------------------------------------------------------------
// You should never need to modify this
///

@function gridsystem-width($columns:$columns) {
    @return ($column-width * $columns) + ($gutter-width * $columns);
}

// Set $total-width to 100% for a fluid layout
$total-width: gridsystem-width($columns);


///
// Sub-Pixel Fix for IE6 & 7
// ----------------------------------------------------------------------------
// Uncomment these two lines and the star-hack width/margin lines below to 
// enable sub-pixel fix for IE6 & 7. 
// See http://tylertate.com/blog/2012/01/05/subpixel-rounding.html
///

// $min-width: 999999;
// $correction: 0.5 / $min-width * 100;


///
// Grid
// ----------------------------------------------------------------------------
///

@mixin container($margin: 0 auto, $columns: $columns) {
    display: block;
    width: $total-width*(($gutter-width + gridsystem-width($columns))/gridsystem-width($columns));
    margin: $margin;
    // margin: 0 $total-width*((($gutter-width*.5)/gridsystem-width($columns))*-1);
    // *width: $total-width*(($gutter-width + gridsystem-width($columns))/gridsystem-width($columns))-$correction;
    // *margin: 0 $total-width*((($gutter-width*.5)/gridsystem-width($columns))*-1)-$correction;
    @include clearfix();
}

@mixin column($x,$columns:$columns) {
    display: inline;
    float: left;
    width: $total-width*(((($gutter-width+$column-width)*$x)-$gutter-width) / gridsystem-width($columns));
    margin: 0 $total-width*(($gutter-width*.5)/gridsystem-width($columns));
    // *width: $total-width*(((($gutter-width+$column-width)*$x)-$gutter-width) / gridsystem-width($columns))-$correction;
    // *margin: 0 $total-width*(($gutter-width*.5)/gridsystem-width($columns))-$correction;
}

@mixin push($offset:1) {
    margin-left: $total-width*((($gutter-width+$column-width)*$offset) / gridsystem-width($columns)) + $total-width*(($gutter-width*.5)/gridsystem-width($columns));
}

@mixin pull($offset:1) {
    margin-right: $total-width*((($gutter-width+$column-width)*$offset) / gridsystem-width($columns)) + $total-width*(($gutter-width*.5)/gridsystem-width($columns));
}