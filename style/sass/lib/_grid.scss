///
// Griddie
// ============================================================================
// Based on:
// - The Semantic Grid System (http://bit.ly/qkNsk0)
// - Compass' Blueprint Grids (http://bit.ly/oZmWcF)
///



///
// If Statements
// ----------------------------------------------------------------------------
///

// If fluid width is re-specify `$total-width`
@if ($fluid) {
    $total-width: 100%;
}

// Sub Pixel Rendering
// http://tylertate.com/blog/2012/01/05/subpixel-rounding.html
@if ($subpixel) {
    $min-width: 999999;
    $correction: 0.5 / $min-width * 100;
}


///
// Grids Width
// ----------------------------------------------------------------------------
///
@function grids-width ($columns:$columns) {
    @return ($column-width + $gutter-width) * $columns - $gutter-width;
}


///
// Total width of the grids
// ----------------------------------------------------------------------------
// @var num
///
$total-width: grids-width($columns);


///
// Micro Clearfix
// ----------------------------------------------------------------------------
// http://nicolasgallagher.com/micro-clearfix-hack/
///
@mixin clearfix () {
    *zoom:1;

    &:before,
    &:after {
        content:"";
        display:table;
    }
    &:after {
        clear:both;
    }
}


///
// Container
// ----------------------------------------------------------------------------
///
@mixin container ($columns:$columns) {
    @if ($subpixel) {
        *width: $total-width*(($gutter-width + grid-width($columns))/grid-width($columns))-$correction;
    } @else {
        width: $total-width*(($gutter-width + grids-width($columns))/grids-width($columns));
    }
    @include clearfix();
}


///
// Cols
// ----------------------------------------------------------------------------
// Shorthand for `columns`
// $cols        num   Number of columns to use
// $margin      bool  Display the margin
// $total_cols  num   Number of columns to base `$cols` on
///
@mixin cols ($cols:$columns, $total_cols:$columns) {
    display: inline-block;
//    float: left;
    @if ($subpixel) {
        *width: $total-width*(((($gutter-width+$column-width)*$cols)-$gutter-width) / grid-width($total_cols))-$correction;
    } @else {
        width: $total-width*(((($gutter-width+$column-width)*$cols)-$gutter-width) / grids-width($total_cols));
    }
}

@mixin col-gutter ($total_cols:$columns) {
    @if ($subpixel) {
        *margin: 0 $total-width*(($gutter-width/2)/grids-width($total_cols))-$correction;
    } @else {
        margin: 0 $total-width*(($gutter-width/2)/grids-width($total_cols));
    }
}


///
// Push
// ----------------------------------------------------------------------------
// Pushes a element right by number of columns specified in argument
// $offset  int  How many columns to offset by
///
@mixin push ($offset:1, $gutter:true) {
    @if ($gutter) {
        margin-left: $total-width*((($gutter-width+$column-width)*$offset) / grids-width($columns)) + $total-width*(($gutter-width*.5)/grids-width($columns));
    } @else {
        margin-left: $total-width*((($gutter-width+$column-width)*$offset) / grids-width($columns));
    }
}

///
// Pull
// ----------------------------------------------------------------------------
// Pulls a element left by number of columns specified in argument
// $offset  int  How many columns to offset by
///
@mixin pull ($offset:1, $gutter:true) {
    @if ($gutter) {
        margin-right: $total-width*((($gutter-width+$column-width)*$offset) / grids-width($columns)) + $total-width*(($gutter-width*.5)/grids-width($columns));
    } @else {
        margin-right: $total-width*((($gutter-width+$column-width)*$offset) / grids-width($columns));
    }
}